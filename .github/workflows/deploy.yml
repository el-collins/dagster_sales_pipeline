name: Deploy Dagster App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install System Dependencies
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        command_timeout: "20m"
        script: |
          set -e
          sudo apt-get update
          sudo apt-get install -y python3-venv python3-pip git net-tools

    - name: Setup Application Directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        command_timeout: "20m"
        script: |
          set -e
          # Create app directory if it doesn't exist
          mkdir -p ~/airbnb-analytics
          
          # Clone/pull repository
          if [ -d "~/airbnb-analytics/.git" ]; then
            cd ~/airbnb-analytics
            git pull origin main
          else
            rm -rf ~/airbnb-analytics
            git clone ${{ github.server_url }}/${{ github.repository }} ~/airbnb-analytics
            cd ~/airbnb-analytics
          fi

    - name: Setup Python Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        command_timeout: "20m"
        script: |
          set -e
          cd ~/airbnb-analytics
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          mkdir -p data

    - name: Configure Dagster
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        command_timeout: "20m"
        script: |
          set -e
          # Create and configure Dagster home directory
          mkdir -p ~/dagster_home
          
          # Create dagster.yaml configuration file
          cat > ~/dagster_home/dagster.yaml << EOF
          storage:
            sqlite:
              base_dir: /home/ubuntu/dagster_home

          compute_logs:
            module: dagster.core.storage.local_compute_log_manager
            class: LocalComputeLogManager
            config:
              base_dir: /home/ubuntu/dagster_home/compute_logs

          local_artifact_storage:
            module: dagster.core.storage.root
            class: LocalArtifactStorage
            config:
              base_dir: /home/ubuntu/dagster_home/storage

          scheduler:
            module: dagster.core.scheduler
            class: DagsterDaemonScheduler

          run_coordinator:
            module: dagster.core.run_coordinator
            class: QueuedRunCoordinator
          EOF

    - name: Setup and Start Dagster Service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        command_timeout: "20m"
        script: |
          set -e
          # Create systemd service file
          sudo tee /etc/systemd/system/dagster.service << EOF
          [Unit]
          Description=Dagster Server
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/home/ubuntu/airbnb-analytics
          Environment="PATH=/home/ubuntu/airbnb-analytics/venv/bin"
          Environment="PYTHONPATH=/home/ubuntu/airbnb-analytics"
          Environment="DAGSTER_HOME=/home/ubuntu/dagster_home"
          ExecStart=/home/ubuntu/airbnb-analytics/venv/bin/dagster dev -f sales_pipeline/assets.py --host 0.0.0.0 --port 3000
          Restart=always
          RestartSec=1

          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Set proper permissions and start service
          sudo chown -R ubuntu:ubuntu ~/dagster_home
          sudo systemctl daemon-reload
          sudo systemctl enable dagster
          sudo systemctl restart dagster
          
          # Verify deployment
          sleep 10
          if ! sudo systemctl is-active dagster; then
            echo "Dagster service failed to start"
            sudo systemctl status dagster
            exit 1
          fi
          
          if ! netstat -tulpn | grep :3000 > /dev/null; then
            echo "Port 3000 is not listening"
            exit 1
          fi
          echo "Deployment successful - Dagster is running on port 3000" 